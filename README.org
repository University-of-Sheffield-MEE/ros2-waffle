[[Build Status][https://img.shields.io/github/actions/workflow/status/hegde-atri/ros2-docker/docker-publish.yml.svg]]
#+title: ROS2 Humble Development Container
#+author: Atri Hegde

* Preface

* Instructions
** Setting up VSCode (Optional)

You can just write your code in your preferred code editor directly from your ros2 workspace, but if you work with VSCode you can install the Dev Containers extension to connect to the ros2 docker container, so you can open terminals directly from vscode without having to run =ros_shell= (or its equivalent).

** Linux

Thankfully, you don't need to run docker-compose on linux, as everything runs "natively" from the =Dockerfile=. We can just use the following command to build and create the container.

#+begin_src bash

#+end_src

And this to get its shell.

#+begin_src bash

#+end_src

#+begin_quote
Since you use Linux I am expecting you to be familiar enough with the terminal to setup your own aliases.
#+end_quote

** MacOS


*** setup.bash
Run =source setup.bash= everytime you want to work on ROS or

1. Find out what shell you are using by running the command =echo $SHELL=.
2. It will be either bash or zsh.
   a. If you are running =bash= add the next code block to =~/.bashrc=
   b. If you are running =zsh= add the the next code block to =~/.zshrc=

#+begin_src bash
ros_dev() {
  if (( $# != 2 )); then
    echo "Usage: ros_dev <container_name1> <project_path1>"
    return 1
  fi

  ROS_DEV_CONTAINER_NAME=$1
  ROS_PROJECT_PATH=$2

  cd $ROS_DOCKER_DIR && docker compose up -d --build
}

ros_shell() {
    if (( $# != 1 )); then
        echo "Usuage: ros_shell <container_name>"
        return 1
    fi

    docker exec -it $1 /bin/zsh
}
#+end_src


** Windows


* Next steps for MacOS

** Setting up environment variables

We can just add it to our =.bashrc= file (or =.zshrc= if you are using zsh).

#+begin_quote
For advanced users: You can automate the loading of environement variables and docker containers using =direnv=.
#+end_quote

*** ROS_DOCKER_ENV

We need to have a variable called =ROS_DOCKER_ENV= which contains the full path to the location where you have cloned this repository.

#+begin_src bash
export ROS_DOCKER_ENV="/path/to/this/repository"
#+end_src

You can test if it worked by using this command and seeing the correct path as the output.

#+begin_src bash
echo $ROS_DOCKER_ENV
#+end_src
